theme_bw() +
geom_jitter(alpha=0.4) +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("brown1",
"chartreuse3",
"plum4",
"hotpink1",
"darkorange2",
"dodgerblue"))
PARs.Cbp80Hpr1 <- ggplot(Cbp80Hpr1, aes(x=factor(Group), y=means, fill=factor(Group))) +
geom_violin(alpha=0.8) +
ggtitle("PARS scores per K-mer cluster for Cbp80Hpr1 transcripts") +
xlab("Cluster") +
ylab("PARS score") +
theme_bw() +
geom_jitter(alpha=0.4) +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("brown1",
"chartreuse3",
"plum4",
"hotpink1",
"darkorange2",
"dodgerblue"))
PARs.Cbp80
PARs.Cbp80 <- ggplot(Cbp80.Merged, aes(x=factor(Group), y=means, fill=factor(Group))) +
geom_violin(alpha=0.8) +
ggtitle("PARS scores per K-mer cluster for Cbp80 transcripts") +
xlab("Cluster") +
ylab("PARS score") +
theme_bw() +
geom_jitter(alpha=0.4) +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("brown1",
"chartreuse3",
"plum4",
"hotpink1",
"darkorange2",
"dodgerblue",
"black"))
PARs.Cbp80
PARS.mean <- mean(data.means$means)
PARS.mean
PARs.Cbp80 <- ggplot(Cbp80.Merged, aes(x=factor(Group), y=means, fill=factor(Group))) +
geom_violin(alpha=0.8) +
ggtitle("PARS scores per K-mer cluster for Cbp80 transcripts") +
xlab("Cluster") +
ylab("PARS score") +
theme_bw() +
geom_hline(yintercept=PARS.mean, linetype="dashed", color = "black", size=2) +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("brown1",
"chartreuse3",
"plum4",
"hotpink1",
"darkorange2",
"dodgerblue",
"grey"))
PARs.Cbp80Hpr1 <- ggplot(Cbp80Hpr1.Merged, aes(x=factor(Group), y=means, fill=factor(Group))) +
geom_violin(alpha=0.8) +
ggtitle("PARS scores per K-mer cluster for Cbp80Hpr1 transcripts") +
xlab("Cluster") +
ylab("PARS score") +
theme_bw() +
geom_hline(yintercept=PARS.mean, linetype="dashed", color = "black", size=2) +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("brown1",
"chartreuse3",
"plum4",
"hotpink1",
"darkorange2",
"dodgerblue",
"grey"))
PARs.Cbp80
PARs.Cbp80Hpr1
PARs.Cbp80 + PARs.Cbp80Hpr1
PARs.Cbp80 <- ggplot(Cbp80.Merged, aes(x=factor(Group), y=means, fill=factor(Group))) +
geom_violin(alpha=0.8) +
ggtitle("PARS scores per K-mer cluster for Cbp80 transcripts") +
xlab("Cluster") +
ylab("PARS score") +
theme_bw() +
geom_hline(yintercept=PARS.mean, linetype="dashed", color = "black", size=0.5) +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("brown1",
"chartreuse3",
"plum4",
"hotpink1",
"darkorange2",
"dodgerblue",
"grey"))
PARs.Cbp80Hpr1 <- ggplot(Cbp80Hpr1.Merged, aes(x=factor(Group), y=means, fill=factor(Group))) +
geom_violin(alpha=0.8) +
ggtitle("PARS scores per K-mer cluster for Cbp80Hpr1 transcripts") +
xlab("Cluster") +
ylab("PARS score") +
theme_bw() +
geom_hline(yintercept=PARS.mean, linetype="dashed", color = "black", size=0.5) +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("brown1",
"chartreuse3",
"plum4",
"hotpink1",
"darkorange2",
"dodgerblue",
"grey"))
PARs.Cbp80
PARs.Cbp80Hpr1
PARs.Cbp80 + PARs.Cbp80Hpr1
PARs.Cbp80 <- ggplot(Cbp80.Merged, aes(x=factor(Group), y=means, fill=factor(Group))) +
geom_violin(alpha=0.8) +
ggtitle("PARS scores per K-mer cluster for Cbp80 transcripts") +
xlab("Cluster") +
ylab("PARS score") +
theme_bw() +
geom_hline(yintercept=PARS.mean, linetype="dashed", color = "black", size=0.5) +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
stat_compare_means(method = "anova", label.y = PARS.mean) + # Add global annova p-value
stat_compare_means(label = "p.signif", method = "t.test",
ref.group = ".all.")
Cbp80.compare <- compare_means(means ~ group,  data = Cbp80.Merged, method = "anova")
library(ggpubr)
Cbp80.compare <- compare_means(means ~ group,  data = Cbp80.Merged, method = "anova")
Cbp80.compare <- compare_means(means ~ Group,  data = Cbp80.Merged, method = "anova")
Cbp80Hpr1.compare <- compare_means(means ~ Group,  data = Cbp80Hpr1.Merged, method = "anova")
PARs.Cbp80 <- ggplot(Cbp80.Merged, aes(x=factor(Group), y=means, fill=factor(Group))) +
geom_violin(alpha=0.8) +
ggtitle("PARS scores per K-mer cluster for Cbp80 transcripts") +
xlab("Cluster") +
ylab("PARS score") +
theme_bw() +
geom_hline(yintercept=PARS.mean, linetype="dashed", color = "black", size=0.5) +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
stat_compare_means(method = "anova", label.y = PARS.mean) + # Add global annova p-value
stat_compare_means(label = "p.signif", method = "t.test", ref.group = ".all.")
scale_fill_manual(values = c("brown1",
"chartreuse3",
"plum4",
"hotpink1",
"darkorange2",
"dodgerblue",
"grey")) +
PARs.Cbp80Hpr1 <- ggplot(Cbp80Hpr1.Merged, aes(x=factor(Group), y=means, fill=factor(Group))) +
geom_violin(alpha=0.8) +
ggtitle("PARS scores per K-mer cluster for Cbp80Hpr1 transcripts") +
xlab("Cluster") +
ylab("PARS score") +
theme_bw() +
geom_hline(yintercept=PARS.mean, linetype="dashed", color = "black", size=0.5) +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("brown1",
"chartreuse3",
"plum4",
"hotpink1",
"darkorange2",
"dodgerblue",
"grey"))
PARs.Cbp80 <- ggplot(Cbp80.Merged, aes(x=factor(Group), y=means, fill=factor(Group))) +
geom_violin(alpha=0.8) +
ggtitle("PARS scores per K-mer cluster for Cbp80 transcripts") +
xlab("Cluster") +
ylab("PARS score") +
theme_bw() +
geom_hline(yintercept=PARS.mean, linetype="dashed", color = "black", size=0.5) +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
stat_compare_means(method = "anova", label.y = PARS.mean) + # Add global annova p-value
stat_compare_means(label = "p.signif", method = "t.test", ref.group = ".all.") +
scale_fill_manual(values = c("brown1",
"chartreuse3",
"plum4",
"hotpink1",
"darkorange2",
"dodgerblue",
"grey")) +
PARs.Cbp80Hpr1 <- ggplot(Cbp80Hpr1.Merged, aes(x=factor(Group), y=means, fill=factor(Group))) +
geom_violin(alpha=0.8) +
ggtitle("PARS scores per K-mer cluster for Cbp80Hpr1 transcripts") +
xlab("Cluster") +
ylab("PARS score") +
theme_bw() +
geom_hline(yintercept=PARS.mean, linetype="dashed", color = "black", size=0.5) +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("brown1",
"chartreuse3",
"plum4",
"hotpink1",
"darkorange2",
"dodgerblue",
"grey"))
PARs.Cbp80
PARs.Cbp80 <- ggplot(Cbp80.Merged, aes(x=factor(Group), y=means, fill=factor(Group))) +
geom_violin(alpha=0.8) +
ggtitle("PARS scores per K-mer cluster for Cbp80 transcripts") +
xlab("Cluster") +
ylab("PARS score") +
theme_bw() +
geom_hline(yintercept=PARS.mean, linetype="dashed", color = "black", size=0.5) +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
stat_compare_means(method = "anova", label.y = PARS.mean) + # Add global annova p-value
stat_compare_means(label = "p.signif", method = "t.test", ref.group = "All") +
scale_fill_manual(values = c("brown1",
"chartreuse3",
"plum4",
"hotpink1",
"darkorange2",
"dodgerblue",
"grey")) +
PARs.Cbp80Hpr1 <- ggplot(Cbp80Hpr1.Merged, aes(x=factor(Group), y=means, fill=factor(Group))) +
geom_violin(alpha=0.8) +
ggtitle("PARS scores per K-mer cluster for Cbp80Hpr1 transcripts") +
xlab("Cluster") +
ylab("PARS score") +
theme_bw() +
geom_hline(yintercept=PARS.mean, linetype="dashed", color = "black", size=0.5) +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = c("brown1",
"chartreuse3",
"plum4",
"hotpink1",
"darkorange2",
"dodgerblue",
"grey"))
PARs.Cbp80 <- ggplot(Cbp80.Merged, aes(x=factor(Group), y=means, fill=factor(Group))) +
geom_violin(alpha=0.8) +
ggtitle("PARS scores per K-mer cluster for Cbp80 transcripts") +
xlab("Cluster") +
ylab("PARS score") +
theme_bw() +
geom_hline(yintercept=PARS.mean, linetype="dashed", color = "black", size=0.5) +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
stat_compare_means(method = "anova", label.y = PARS.mean) + # Add global annova p-value
stat_compare_means(label = "p.signif", method = "t.test", ref.group = "All") +
scale_fill_manual(values = c("brown1",
"chartreuse3",
"plum4",
"hotpink1",
"darkorange2",
"dodgerblue",
"grey"))
PARs.Cbp80
PARs.Cbp80 <- ggplot(Cbp80.Merged, aes(x=factor(Group), y=means, fill=factor(Group))) +
geom_violin(alpha=0.8) +
ggtitle("PARS scores per K-mer cluster for Cbp80 transcripts") +
xlab("Cluster") +
ylab("PARS score") +
theme_bw() +
geom_hline(yintercept=PARS.mean, linetype="dashed", color = "black", size=0.5) +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
stat_compare_means(method = "anova", label.y = 3) + # Add global annova p-value
stat_compare_means(label = "p.signif", method = "t.test", ref.group = "All") +
scale_fill_manual(values = c("brown1",
"chartreuse3",
"plum4",
"hotpink1",
"darkorange2",
"dodgerblue",
"grey"))
PARs.Cbp80
PARs.Cbp80 <- ggplot(Cbp80.Merged, aes(x=factor(Group), y=means, fill=factor(Group))) +
geom_violin(alpha=0.8) +
ggtitle("PARS scores per K-mer cluster for Cbp80 transcripts") +
xlab("Cluster") +
ylab("PARS score") +
theme_bw() +
geom_hline(yintercept=PARS.mean, linetype="dashed", color = "black", size=0.5) +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
stat_compare_means(method = "anova", label.y = 3) +
stat_compare_means(label = "p.signif", method = "t.test", ref.group = "All") +
scale_fill_manual(values = c("brown1",
"chartreuse3",
"plum4",
"hotpink1",
"darkorange2",
"dodgerblue",
"grey"))
PARs.Cbp80Hpr1 <- ggplot(Cbp80Hpr1.Merged, aes(x=factor(Group), y=means, fill=factor(Group))) +
geom_violin(alpha=0.8) +
ggtitle("PARS scores per K-mer cluster for Cbp80Hpr1 transcripts") +
xlab("Cluster") +
ylab("PARS score") +
theme_bw() +
geom_hline(yintercept=PARS.mean, linetype="dashed", color = "black", size=0.5) +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
stat_compare_means(method = "anova", label.y = 3) +
stat_compare_means(label = "p.signif", method = "t.test", ref.group = "All") +
scale_fill_manual(values = c("brown1",
"chartreuse3",
"plum4",
"hotpink1",
"darkorange2",
"dodgerblue",
"grey"))
PARs.Cbp80
PARs.Cbp80Hpr1
PARs.Cbp80 + PARs.Cbp80Hpr1
?ggsave
PARs.Cbp80 <- ggplot(Cbp80.Merged, aes(x=factor(Group), y=means, fill=factor(Group))) +
geom_violin(alpha=0.8) +
ggtitle("PARS scores per K-mer cluster for Cbp80 transcripts") +
xlab("Cluster") +
ylab("PARS score") +
theme_bw() +
geom_hline(yintercept=PARS.mean, linetype="dashed", color = "black", size=0.5) +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
stat_compare_means(method = "anova", label.y = 3) +
stat_compare_means(label = "p.signif", method = "t.test", ref.group = "All") +
scale_fill_manual(values = c("brown1",
"chartreuse3",
"plum4",
"hotpink1",
"darkorange2",
"dodgerblue",
"grey"))
PARs.Cbp80Hpr1 <- ggplot(Cbp80Hpr1.Merged, aes(x=factor(Group), y=means, fill=factor(Group))) +
geom_violin(alpha=0.8) +
ggtitle("PARS scores per K-mer cluster for Cbp80Hpr1 transcripts") +
xlab("Cluster") +
ylab("PARS score") +
theme_bw() +
geom_hline(yintercept=PARS.mean, linetype="dashed", color = "black", size=0.5) +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
stat_compare_means(method = "anova", label.y = 3) +
stat_compare_means(label = "p.signif", method = "t.test", ref.group = "All") +
scale_fill_manual(values = c("brown1",
"chartreuse3",
"plum4",
"hotpink1",
"darkorange2",
"dodgerblue",
"grey"))
PARs.Cbp80
PARs.Cbp80Hpr1
PARs.Cbp80 + PARs.Cbp80Hpr1
ggsave("PARSscore_Vplot.png", plot = last_plot(), units = "in", height = 10, width = 18, dpi = 300)
Cbp80.compare <- compare_means(means ~ Group,  data = Cbp80.Merged, method = "anova")
View(Cbp80.compare)
?Tukey
View(Cbp80Hpr1.means)
Cbp80.test <- shapiro.test(Cbp80.means$means)
View(Cbp80.test)
View(Cbp80.Merged)
ShapiroWilks.PARS(Cbp80.Merged, "All")
ShapiroWilks.PARS <- function(Data, group){
group.vector <- subset(data, data$Group==group)
W.test <- shapiro.test(group.vector)
return(W.test$p.value)
}
ShapiroWilks.PARS(Cbp80.Merged, "All")
ShapiroWilks.PARS(Cbp80.Merged, 0)
View(Cbp80.Merged)
ShapiroWilks.PARS <- function(Data, group){
comms.subset <- subset(data, data$Group==group)
W.test <- shapiro.test(comms.subset$means)
return(W.test$p.value)
}
ShapiroWilks.PARS(Cbp80.Merged, 0)
comms.subset <- subset(Cbp80.Merged, Cbp80.Merged$Group==0)
View(comms.subset)
W.test <- shapiro.test(comms.subset$means)
View(W.test)
ShapiroWilks.PARS(Cbp80.Merged, 0)
View(comms.subset)
ShapiroWilks.PARS <- function(Data, group){
comms.subset <- subset(data, data$Group==group)
comms.means <- comms.subset$means
W.test <- shapiro.test(comms.means)
return(W.test$p.value)
}
ShapiroWilks.PARS(Cbp80.Merged, 0)
ShapiroWilks.PARS(Cbp80.Merged, 1)
ShapiroWilks.PARS(Cbp80.Merged, 2)
comms.subset <- subset(Cbp80.Merged, Cbp80.Merged$Group==0)
length(comms.subset)
length(comms.subset$means)
comms.subset <- subset(Cbp80.Merged, Cbp80.Merged$Group==0)
W.test <- shapiro.test(comms.subset$means)
shapiro.test(comms.subset$means)
ShapiroWilks.PARS <- function(Data, group){
comms.subset <- subset(data, data$Group==group)
comms.means <- comms.subset$means
W.test <- shapiro.test(comms.means)
return(W.test$p.value)
}
ShapiroWilks.PARS(Cbp80.Merged, 2)
ShapiroWilks.PARS <- function(Data, group){
comms.subset <- subset(data, data$Group==group)
comms.means <- vector(comms.subset$means)
W.test <- shapiro.test(comms.means)
return(W.test$p.value)
}
ShapiroWilks.PARS(Cbp80.Merged, 2)
ShapiroWilks.PARS <- function(Data, group){
comms.subset <- subset(data, data$Group==group)
comms.means <- c(comms.subset$means)
W.test <- shapiro.test(comms.means)
return(W.test$p.value)
}
ShapiroWilks.PARS(Cbp80.Merged, 2)
ShapiroWilks.PARS <- function(Data, group){
comms.subset <- subset(data, data$Group==group)
W.test <- shapiro.test(comms.subset$means)
return(W.test$p.value)
}
ShapiroWilks.PARS(Cbp80.Merged, 2)
ShapiroWilks.PARS <- function(Data, group){
comms.subset <- subset(data, data$Group==group)
W.test <- shapiro.test(comms.subset$means)
return(W.test)
}
ShapiroWilks.PARS(Cbp80.Merged, 2)
ShapiroWilks.PARS <- function(Data, group){
comms.subset <- subset(data, data$Group==group)
W.test <- shapiro.test(comms.subset$means)
return(W.test$p.value)
}
ShapiroWilks.PARS(Cbp80.Merged, 5)
W.test <- shapiro.test(c(comms.subset$means))
ShapiroWilks.PARS <- function(Data, group){
comms.subset <- subset(data, data$Group==group)
W.test <- shapiro.test(c(comms.subset$means))
return(W.test$p.value)
}
ShapiroWilks.PARS(Cbp80.Merged, 1)
ShapiroWilks.PARS <- function(Data, group){
comms.subset <- subset(data, data$Group==group)
W.test <- shapiro.test(factor(comms.subset$means))
return(W.test$p.value)
}
ShapiroWilks.PARS(Cbp80.Merged, 1)
ShapiroWilks.PARS <- function(Data, group){
comms.subset <- subset(data, data$Group==group)
W.test <- shapiro.test(as.numeric(comms.subset$means))
return(W.test$p.value)
}
ShapiroWilks.PARS(Cbp80.Merged, 1)
ShapiroWilks.PARS <- function(Data, group){
comms.subset <- subset(data, data$Group==group)
W.test <- shapiro.test(comms.subset$means)
return(W.test$p.value)
}
ShapiroWilks.PARS(Cbp80.Merged, 1)
comms.subset <- subset(Cbp80.Merged, Cbp80.Merged$Group==0)
shapiro.test(comms.subset$means)
comms.subset <- subset(Cbp80.Merged, Cbp80.Merged$Group==1)
shapiro.test(comms.subset$means)
comms.subset <- subset(Cbp80.Merged, Cbp80.Merged$Group==2)
shapiro.test(comms.subset$means)
comms.subset <- subset(Cbp80.Merged, Cbp80.Merged$Group==3)
shapiro.test(comms.subset$means)
comms.subset <- subset(Cbp80.Merged, Cbp80.Merged$Group==4)
shapiro.test(comms.subset$means)
comms.subset <- subset(Cbp80.Merged, Cbp80.Merged$Group==5)
shapiro.test(comms.subset$means)
#Determine if PARS scores are normally distributed
comms.subset <- subset(Cbp80.Merged, Cbp80.Merged$Group=="All")
shapiro.test(comms.subset$means)
#Determine if PARS scores are normally distributed
comms.subset <- subset(Cbp80Hpr1.Merged, Cbp80Hpr1.Merged$Group=="0")
shapiro.test(comms.subset$means)
#Determine if PARS scores are normally distributed
comms.subset <- subset(Cbp80Hpr1.Merged, Cbp80Hpr1.Merged$Group=="1")
shapiro.test(comms.subset$means)
#Determine if PARS scores are normally distributed
comms.subset <- subset(Cbp80Hpr1.Merged, Cbp80Hpr1.Merged$Group=="3")
shapiro.test(comms.subset$means)
#Determine if PARS scores are normally distributed
comms.subset <- subset(Cbp80Hpr1.Merged, Cbp80Hpr1.Merged$Group=="4")
shapiro.test(comms.subset$means)
#Determine if PARS scores are normally distributed
comms.subset <- subset(Cbp80Hpr1.Merged, Cbp80Hpr1.Merged$Group=="5")
shapiro.test(comms.subset$means)
?compare_means
library(ggpubr)
Cbp80.compare <- compare_means(means ~ Group,  data = Cbp80.Merged, method = "kruskal.test")
Cbp80Hpr1.compare <- compare_means(means ~ Group,  data = Cbp80Hpr1.Merged, method = "kruskal.test")
PARs.Cbp80 <- ggplot(Cbp80.Merged, aes(x=factor(Group), y=means, fill=factor(Group))) +
geom_violin(alpha=0.8) +
ggtitle("PARS scores per K-mer cluster for Cbp80 transcripts") +
xlab("Cluster") +
ylab("PARS score") +
theme_bw() +
geom_hline(yintercept=PARS.mean, linetype="dashed", color = "black", size=0.5) +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
stat_compare_means(method = "kruskal.test", label.y = 3) +
stat_compare_means(label = "p.signif", method = "wilcox.test", ref.group = "All") +
scale_fill_manual(values = c("brown1",
"chartreuse3",
"plum4",
"hotpink1",
"darkorange2",
"dodgerblue",
"grey"))
PARs.Cbp80Hpr1 <- ggplot(Cbp80Hpr1.Merged, aes(x=factor(Group), y=means, fill=factor(Group))) +
geom_violin(alpha=0.8) +
ggtitle("PARS scores per K-mer cluster for Cbp80Hpr1 transcripts") +
xlab("Cluster") +
ylab("PARS score") +
theme_bw() +
geom_hline(yintercept=PARS.mean, linetype="dashed", color = "black", size=0.5) +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5)) +
stat_compare_means(method = "kruskal.test", label.y = 3) +
stat_compare_means(label = "p.signif", method = "wilcox.test", ref.group = "All") +
scale_fill_manual(values = c("brown1",
"chartreuse3",
"plum4",
"hotpink1",
"darkorange2",
"dodgerblue",
"grey"))
PARs.Cbp80
PARs.Cbp80Hpr1
PARs.Cbp80 + PARs.Cbp80Hpr1
ggsave("PARSscore_Vplot.png", plot = last_plot(), units = "in", height = 10, width = 18, dpi = 300)
